precision highp float;
uniform float time;
uniform vec2 resolution;
varying vec3 fPosition;
varying vec3 fNormal;

#define PI 3.14159265359
#define PI_OVER_TWO 1.57079632679
#define PI_OVER_FOUR 0.78539816339

void main()
{
  // Parameters
  float Roughness = 1.0;
  vec3 eyePosition = vec3(1.0, 1.0, 1.0);
  float what = 1.0;
  vec3 lightPosition = vec3(what, what, what);
  vec3 lightDirection = vec3(1, 0, 0);
  vec3 lightColor = vec3(1.0, 1.0, 1.0);
  float specularPower = 0.3;
  float specularColor = 0.5;
  
  // Global Calculations
  vec3 halfVector = normalize(lightPosition - fPosition);
  float n_dot_l = clamp(dot(fNormal, lightPosition), 0.0, 1.0);
  float n_dot_h = clamp(dot(fNormal, halfVector), 0.0, 1.0);
  float h_dot_l = clamp(dot(halfVector, lightPosition), 0.0, 1.0);
  float n_dot_v = clamp(dot(fNormal, fPosition), 0.0, 1.0);
  
  // Diffuse
  vec3 diffuse = n_dot_l * lightColor;
  
  // NDF Term
  float alpha = Roughness * Roughness;
  vec3 normalisationDistribution = (alpha * alpha) / PI * (((fNormal * halfVector) * (fNormal * halfVector)) * (((alpha * alpha - 1.0) + 1.0) * ((alpha * alpha - 1.0) + 1.0)));
  
  // Specular Term
  float normalisationTerm = (specularPower + 2.0) / 8.0;
  float blinnPhong = pow(n_dot_h, specularPower);
  float specularTerm = normalisationTerm * blinnPhong;
  
  // Cosine Term
  float cosineTerm = n_dot_l;
  
  // Fresnel Term
  float base = 1.0 - h_dot_l;
  float exponential = pow(base, 5.0);
  float fresnelTerm = specularColor + (1.0 - specularColor) * exponential;
  
  
  // Geometric Attenuation
  float k = (Roughness + 1.0) * (Roughness + 1.0);
  vec3 geometricAttenuation = (fNormal * lightPosition / (fNormal * lightPosition) * (1.0 - k) + k) * (fNormal * eyePosition / (fNormal * eyePosition) * (1.0 - k) + k);
  
  
  // Specular
  vec3 specular = normalisationDistribution * fresnelTerm * geometricAttenuation / 4.0 * (fNormal * lightPosition) * (fNormal * eyePosition);
  
  gl_FragColor = vec4(diffuse * 0.8 + specular, 1.0);
  //gl_FragColor = vec4(n_dot_l, 0.0, 0.0, 1.0);
}